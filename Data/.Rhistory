min(datos$trait)
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 20)) + ylim(c(0, 0.2)) 
# Add mean lines
p + geom_vline(data=mu1, aes(xintercept=grp.mean, color=site),
             linetype="dashed", size=1)
##### OBTENER mu
library(plyr)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
# 2. matríz con códigos
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+5)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
# 3. matríz con trait categorizado y clasificado en presencia-ausencia 
result <- discretizar(data=datos, mu=mu2, median=TRUE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
lfm <- as.data.frame(matriz)
colnames(lfm) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
head(lfm)
mu1
mu2
result <- discretizar(data=datos, mu=mu1, median=FALSE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
lfm <- as.data.frame(matriz)
colnames(lfm) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
result <- discretizar(data=datos, mu=mu2, median=TRUE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
lfm <- as.data.frame(matriz)
colnames(lfm) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
head(lfm)
write.table(lfm, "discreteLFM.txt")
# isolate trait (avoids issues with zero values due to NA replacement
code <- data[,1:5]
trait <- as.data.frame(data$SLA) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
#### replace NA with 0
datos[is.na(datos)] <- 0
# delete zero rows
ceros <- which(datos$trait == 0)
ceros
datos <- datos[-ceros,]
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
#2. exploratory plot
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 460)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu1, aes(xintercept=grp.mean, color=site),
             linetype="dashed", size=1)
min(datos$trait)
max(datos$trait)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
# 2. matríz con códigos
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+5)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
# 3. matríz con trait categorizado y clasificado en presencia-ausencia 
result <- discretizar(data=datos, mu=mu1, median=FALSE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
sla <- as.data.frame(matriz)
colnames(sla) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
head(sla)
write.table(sla, "discreteSLA.txt")
# isolate trait (avoids issues with zero values due to NA replacement
code <- data[,1:5]
trait <- as.data.frame(data$hmax) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
#### replace NA with 0
datos[is.na(datos)] <- 0
# delete zero rows
ceros <- which(datos$trait == 0)
ceros
datos <- datos[-ceros,]
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 160)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu1, aes(xintercept=grp.mean, color=site),
             linetype="dashed", size=1)
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 160)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
# 2. matríz con códigos
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+5)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
result <- discretizar(data=datos, mu=mu2, median=TRUE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
hmax <- as.data.frame(matriz)
colnames(hmax) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
head(hmax)
write.table(hmax, "discretehmax.txt")
str(data)
# isolate trait (avoids issues with zero values due to NA replacement
code <- data[,1:5]
trait <- as.data.frame(as.numeric(data$Chl_b)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
#### replace NA with 0
datos[is.na(datos)] <- 0
ceros <- which(datos$trait == 0)
ceros
datos <- datos[-ceros,]
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
#2. exploratory plot
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 50)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
max(datos$trait)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
# 2. matríz con códigos
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+5)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
# 3. matríz con trait categorizado y clasificado en presencia-ausencia 
result <- discretizar(data=datos, mu=mu2, median=TRUE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
Chl_b <- as.data.frame(matriz)
colnames(Chl_b) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
head(Chl_b)
write.table(Chl_b, "discreteChl_b.txt")
# isolate trait (avoids issues with zero values due to NA replacement
code <- data[,1:5]
trait <- as.data.frame(as.numeric(data$Chl_a)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
#### replace NA with 0
datos[is.na(datos)] <- 0
# delete zero rows
##Go through each row and determine if a value is zero
#row_sub = apply(datos, 1, function(row) all(row !=0 ))
##Subset as usual
#datos <- datos[row_sub,] 
ceros <- which(datos$trait == 0)
ceros
datos <- datos[-ceros,]
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
#2. exploratory plot
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 50)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
mu1
mu2
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 50)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu1, aes(xintercept=grp.mean, color=site),
             linetype="dashed", size=1)
mu1
p + geom_vline(data=mu1, aes(xintercept=sd, color=site),
           size=1)
mu1$upper <- mu1$grp.mean + mu1$sd
mu1$lower <- mu1$grp.mean - mu1$sd
mu1
p + geom_vline(data=mu1, aes(xintercept=lower, color=site),
           size=1)
p + geom_vline(data=mu1, aes(xintercept=upper, color=site),
           size=1)
p + geom_vline(data=mu1, aes(xintercept=lower, color=site),
           size=1)
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 50)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
# 2. matríz con códigos
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+5)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
# 3. matríz con trait categorizado y clasificado en presencia-ausencia 
result <- discretizar(data=datos, mu=mu2, median=TRUE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
Chl_a <- as.data.frame(matriz)
colnames(Chl_a) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
head(Chl_a)
write.table(Chl_a, "discreteChl_a.txt")
str(data)
# isolate trait (avoids issues with zero values due to NA replacement
code <- data[,1:5]
trait <- as.data.frame(as.numeric(data$ratio_ab)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
datos[is.na(datos)] <- 0
ceros <- which(datos$trait == 0)
datos <- datos[-ceros,]
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
mu1$upper <- mu1$grp.mean + mu1$sd
mu1$lower <- mu1$grp.mean - mu1$sd
#2. exploratory plot
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 50)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
max(datos$trait)
#2. exploratory plot
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 190)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 50)) + ylim(c(0, 0.02)) 
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 190)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
##### OBTENER mu
# library(plyr)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
# 2. matríz con códigos
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+5)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
# 3. matríz con trait categorizado y clasificado en presencia-ausencia 
result <- discretizar(data=datos, mu=mu2, median=TRUE)
matriz[,7:10] <- result[,2:5]
# 4. rename and save
ratio_ab <- as.data.frame(matriz)
colnames(ratio_ab) <- c("site", "tree", "height", "id", "sp", "sample", "trait.value", "lower", "upper", "middle", "V11")
head(ratio_ab)
write.table(ratio_ab, "discreteratio_ab.txt")
str(data)
# isolate trait (avoids issues with zero values due to NA replacement
code <- data[,1:5]
trait <- as.data.frame(as.numeric(data$Chl_total)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
#### replace NA with 0
datos[is.na(datos)] <- 0
ceros <- which(datos$trait == 0)
datos <- datos[-ceros,]
################## A. density plots
######## ratio_ab
# 1. calculate the mean of each group
# library(plyr)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
mu1$upper <- mu1$grp.mean + mu1$sd
mu1$lower <- mu1$grp.mean - mu1$sd
#2. exploratory plot
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 190)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
str(data)
# isolate trait (avoids issues with zero values due to NA replacement
code <- data[,1:5]
trait <- as.data.frame(as.numeric(data$LS)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
#### replace NA with 0
datos[is.na(datos)] <- 0
# delete zero rows
##Go through each row and determine if a value is zero
#row_sub = apply(datos, 1, function(row) all(row !=0 ))
##Subset as usual
#datos <- datos[row_sub,] 
ceros <- which(datos$trait == 0)
ceros
datos <- datos[-ceros,]
# 1. calculate the mean of each group
library(plyr)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
#2. exploratory plot
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 50)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
str(data)
code <- data[,1:5]
trait <- as.data.frame(as.numeric(data$habit1)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
head(datos)
datos[is.na(datos)] <- 0
ceros <- which(datos$trait == 0)
ceros
View(datos)
View(data)
# library(plyr)
mu1 <- ddply(datos, "site", summarise, grp.mean=mean(trait))
mu2 <- ddply(datos, "site", summarise, grp.median=median(trait))
sds <- ddply(datos, "site", summarise, grp.sd=sd(trait))
mu1$sd <- sds[,2]
# head(mu)
mu1$upper <- mu1$grp.mean + mu1$sd
mu1$lower <- mu1$grp.mean - mu1$sd
mu1
p <- ggplot(datos, aes(x = trait, fill = site)) + geom_density(alpha = 0.5)
p + xlim(c(0, 190)) + ylim(c(0, 0.02)) 
# Add mean lines
p + geom_vline(data=mu2, aes(xintercept=grp.median, color=site),
             linetype="dashed", size=1)
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+6)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
head(matriz)
split_discrete <- function(data=data, mu=mu, median=TRUE) {
# create matrix to store the variables in
mat <- matrix(nrow=nrow(datos), ncol=7)
mat[,1] <- datos$site # LH = 1, RY = 2
mat[,2] <- datos$trait
  for(i in 1:nrow(data)){
mat[i,3] <- ifelse(mat[i,2] == 5, 1, 0)
mat[i,4] <- ifelse(mat[i,2] == 4, 1, 0)
mat[i,5] <- ifelse(mat[i,2] == 3, 1, 0)
mat[i,6] <- ifelse(mat[i,2] == 2, 1, 0)
mat[i,7] <- ifelse(mat[i,2] == 1, 1, 0)
} 
return(mat)
}
result <- split_discrete(data=datos)
head(result)
data$trait
data$traits
data$habit1
datos$habit1
datos$trait
View(datos)
View(data)
datos0 <- data
datos0[is.na(datos0)] <- 0
code <- data[,1:5]
trait <- as.data.frame(as.numeric(data$habit1)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
View(datos)
code <- datos0[,1:5]
trait <- as.data.frame(as.numeric(datos0$habit1)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
View(datos0)
class(datos0$habit1)
levels(datos0$habit1)
datos[is.na(datos)] 
str(datos)
str(datos0)
# 2. matríz con códigos
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+7)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
matriz[,7] <- datos0$habit1
head(matriz)
matriz[,7] <- data$habit1
head(matriz)
head(traits)
matriz[,7] <- traits$habit1
head(traits)
head(traits)
head(matriz)
matriz[,7] <- datos$habit1
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+8)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
matriz[,7] <- traits$habit1
split_discrete <- function(data=data, mu=mu, median=TRUE) {
# create matrix to store the variables in
mat <- matrix(nrow=nrow(datos), ncol=7)
mat[,1] <- datos$site # LH = 1, RY = 2
mat[,2] <- datos$trait
  for(i in 1:nrow(data)){
mat[i,3] <- ifelse(mat[i,2] == 5, 1, 0) #
mat[i,4] <- ifelse(mat[i,2] == 4, 1, 0) #
mat[i,5] <- ifelse(mat[i,2] == 3, 1, 0) #
mat[i,6] <- ifelse(mat[i,2] == 2, 1, 0) #
mat[i,7] <- ifelse(mat[i,2] == 1, 1, 0) #
} 
return(mat)
}
result <- split_discrete(data=datos)
head(result)
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+6)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
result2 <- result[,2:ncol(result)]
head(result)
head(result2)
dim(result2)
dim(matriz)
matriz1 <- as.data.frame(matriz)
result2 <- as.data.frame(result[,2:ncol(result)])
head(result2)
names(result2) <- c("code_habit1","5","4","3","2","1")
head(result2)
head(matriz1)
matriz[,7:12] <- result[,2:ncol(result)]
head(matriz)
habit1 <- as.data.frame(matriz)
colnames(habit1) <- c("site", "tree", "height", "id", "sp", "sample", "code_habit1","5","4","3","2","1")
head(habit1)
habit1$habit1 <- traits$habit1
colnames(habit1) <- c("site", "tree", "height", "id", "sp", "sample", "code_habit1","5","4","3","2","1", "habit1")
head(habit1)
View(habit1)
colnames(habit1) <- c("site", "tree", "height", "id", "sp", "sample", "code_habit1","Ramicaule","Pseudobulb","Monopodial","LeafyStem","empty", "habit1")
write.table(habit1, "discretehabit1.txt")
str(data)
### habit2
datos0 <- data
datos0[is.na(datos0)] <- 0
levels(traits$habit2)
code <- datos0[,1:5]
trait <- as.data.frame(as.numeric(datos0$habit2)) # modificar aquí
datos <- cbind(code, trait)
names(datos) [6] <- "trait"
#### replace NA with 0
datos[is.na(datos)] <- 0
ceros <- which(datos$trait == 0)
ceros
matriz <- matrix(nrow=nrow(datos), ncol=ncol(datos)+6)
matriz[,1:5] <- as.matrix(datos[,1:5])  
matriz[,6] <- paste(matriz[,2], matriz[,3], sep="_")
head(mat)
head(matriz)
head(datos)
split_discrete2 <- function(data=data, mu=mu, median=TRUE) {
# create matrix to store the variables in
mat <- matrix(nrow=nrow(datos), ncol=7)
mat[,1] <- datos$site # LH = 1, RY = 2
mat[,2] <- datos$trait
  for(i in 1:nrow(data)){
mat[i,3] <- ifelse(mat[i,2] == 4, 1, 0) #
mat[i,4] <- ifelse(mat[i,2] == 3, 1, 0) #
mat[i,5] <- ifelse(mat[i,2] == 2, 1, 0) #
mat[i,6] <- ifelse(mat[i,2] == 1, 1, 0) #
} 
return(mat)
}
result <- split_discrete2(data=datos)
head(result)
matriz[,7:12] <- result[,2:ncol(result)]
head(matriz)
habit2 <- as.data.frame(matriz)
habit2$habit2 <- traits$habit2
colnames(habit2) <- c("site", "tree", "height", "id", "sp", "sample", "code_habit1","4","3","2","1","empty", "na")
head(habit2)
View(habit2)
colnames(habit2) <- c("site", "tree", "height", "id", "sp", "sample", "code_habit1","Scandent","Prostrate","Erect","empty","empty", "na")
head(habit2)
write.table(habit2, "discretehabit2.txt")
q()
